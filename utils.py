def coord_to_hand(i, j):
    cards = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']

    c1 = cards[12-i]
    c2 = cards[12-j]

    if i < j:
        return c1 + c2 + 'o' # a little bit backwards with the o and s but whatever
    elif i > j:
        return c2 + c1 + 's'
    else:
        return c1 + c1


def count_combos(i, j, dead_cards=None):
    if dead_cards is None:
        if i < j:
            return 12
        elif i > j:
            return 4
        else:
            return 6
    else:
        cards = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
        c1 = cards[12-i]
        c2 = cards[12-j]
        c1s = len(set([c1 + 'c', c1 + 'h', c1 + 's', c1 + 'd']) - set(dead_cards))
        c2s = len(set([c2 + 'c', c2 + 'h', c2 + 's', c2 + 'd']) - set(dead_cards))
        if i == j:
            return [0, 0, 1, 3, 6][c1s]
        elif i < j:
            #offsuit
            return c1s * c2s - min(c1s, c2s)
        else:
            return min(c1s, c2s)


def ranked_hands(k_best=None, count=None):
    hands = [(0,0), (1,1), (2,2), (3,3), (0,1), (4,4), (0,2), (1,0), (5,5), (6,6), (0,3), (2,0), (1,2),
             (0,4), (7,7), (8,8), (3,0), (1,3), (0,5), (0,6), (2,1), (9,9), (2,3), (1,4), (0,7), (0,9),
             (2,4), (4,0), (10,10), (3,4), (0,10), (0,8), (0,11), (1,5), (4,5), (5,6), (3,1), (2,5), (0,12),
             (3,5), (11,11), (1,6), (6,7), (4,6), (5,0), (5,7), (12,12), (3,2), (2,6), (1,7), (3,6), (6,0),
             (7,8), (4,1), (1,8), (6,8), (4,7), (8,9), (4,2), (1,9), (7,9), (7,0), (4,3), (2,7), (1,10),
             (5,8), (3,7), (9,10), (9,0), (1,11), (2,8), (6,9), (2,9), (5,4), (5,1), (6,5), (10,0), (8,0),
             (8,10), (1,12), (2,10), (4,8), (5,2), (11,0), (2,11), (5,3), (7,10), (5,9), (9,11), (3,8), (3,9),
             (10,11), (6,10), (8,11), (2,12), (7,6), (6,4), (3,10), (6,1), (12,0), (7,5), (3,11), (6,2), (4,9),
             (6,3), (4,10), (8,7), (5,10), (5,11), (9,12), (7,11), (7,1), (4,11), (3,12), (8,6), (6,11), (10,12),
             (9,8), (7,4), (5,12), (9,7), (4,12), (8,1), (6,12), (8,12), (10,9), (8,5), (11,12), (7,2), (9,1),
             (7,3), (7,12), (9,6), (10,1), (8,2), (10,8), (9,2), (11,1), (10,2), (8,4), (11,9), (10,7), (9,5),
             (11,10), (11,2), (12,1), (8,3), (10,6), (9,3), (11,8), (10,3), (12,2), (11,3), (9,4), (10,4), (10,5),
             (12,9), (11,5), (11,7), (12,10), (11,4), (12,3), (11,6), (12,5), (12,6), (12,4), (12,11), (12,8), (12,7)]
    if k_best is not None:
        return hands[:k_best], sum([count_combos(*i) for i in hands[:k_best]])
    if count is not None:
        c = 0
        i = 0
        while c < count:
            if i >= len(hands):
                break
            c += count_combos(*hands[i])
            i += 1
        return hands[:i], c
    raise ValueError("provide an argument")
